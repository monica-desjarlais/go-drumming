{"version":3,"sources":["components/DrumPad.js","App.js","serviceWorker.js","index.js"],"names":["DrumPad","handleKeydown","e","keyCode","props","letter","charCodeAt","audio","play","currentTime","handleDisplay","id","handleClick","console","log","this","document","addEventListener","window","focus","removeEventListener","className","onClick","src","ref","React","Component","data","App","display","setState","state","map","d","key","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iPAgDeA,G,iNAlCTC,cAAgB,SAAAC,GACXA,EAAEC,UAAY,EAAKC,MAAMC,OAAOC,eACjC,EAAKC,MAAMC,OACX,EAAKD,MAAME,YAAc,EACzB,EAAKL,MAAMM,cAAc,EAAKN,MAAMO,M,EAIxCC,YAAc,WACZ,EAAKL,MAAMC,OACX,EAAKD,MAAME,YAAc,EACzB,EAAKL,MAAMM,cAAc,EAAKN,MAAMO,K,mFApBpCE,QAAQC,IAAIC,KAAKR,OACjBS,SAASC,iBAAiB,UAAWF,KAAKd,eAC1CiB,OAAOC,U,6CAIRH,SAASI,oBAAoB,UAAWL,KAAKd,iB,+BAkBtC,IAAD,OACL,OACE,yBACIoB,UAAU,WACVV,GAAII,KAAKX,MAAMO,GACfW,QAASP,KAAKH,aAEhB,4BAAKG,KAAKX,MAAMC,QAChB,2BAAOM,GAAII,KAAKX,MAAMC,OACfgB,UAAU,OACVE,IAAKR,KAAKX,MAAMmB,IAChBC,IAAK,SAAAA,GAAG,OAAI,EAAKjB,MAAQiB,U,GAtCtBC,IAAMC,YCEtBC,EAAO,CACX,CAAEhB,GAAI,QAASN,OAAQ,IAAKkB,IAAK,qDACjC,CAAEZ,GAAI,SAAUN,OAAQ,IAAKkB,IAAK,yDAClC,CAAEZ,GAAI,QAASN,OAAQ,IAAKkB,IAAK,mDACjC,CAAEZ,GAAI,UAAWN,OAAQ,IAAKkB,IAAK,0DACnC,CAAEZ,GAAI,SAAUN,OAAQ,IAAKkB,IAAK,iDAClC,CAAEZ,GAAI,UAAWN,OAAQ,IAAKkB,IAAK,2DACnC,CAAEZ,GAAI,WAAYN,OAAQ,IAAKkB,IAAK,iDACpC,CAAEZ,GAAI,WAAYN,OAAQ,IAAKkB,IAAK,yDACpC,CAAEZ,GAAI,QAASN,OAAQ,IAAKkB,IAAK,iEAkCpBK,E,YA9Bb,WAAYxB,GAAO,IAAD,8BAChB,4CAAMA,KAMRM,cAAgB,SAAAmB,GAAO,OAAI,EAAKC,SAAS,CAAED,aALzC,EAAKE,MAAQ,CACXF,QAAS,eAHK,E,sEAQT,IAAD,OACR,OACE,6BACE,wBAAIR,UAAU,SAAd,eACF,yBAAKV,GAAG,gBACN,yBAAKA,GAAG,aAAagB,EAAKK,KAAI,SAAAC,GAAC,OAC3B,kBAAC,EAAD,CACEC,IAAKD,EAAEtB,GACPA,GAAIsB,EAAEtB,GACNN,OAAQ4B,EAAE5B,OACVkB,IAAKU,EAAEV,IACPb,cAAe,EAAKA,qBAK5B,yBAAKC,GAAG,WAAWI,KAAKgB,MAAMF,c,GAzBhBJ,IAAMC,WCJJS,QACW,cAA7BjB,OAAOkB,SAASC,UAEe,UAA7BnB,OAAOkB,SAASC,UAEhBnB,OAAOkB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASxB,SAASyB,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.44501e7c.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass DrumPad extends React.Component {\r\n\r\n    componentDidMount() {\r\n        console.log(this.audio)\r\n        document.addEventListener('keydown', this.handleKeydown)\r\n        window.focus()\r\n      }\r\n      \r\n     componentWillUnmount() {\r\n       document.removeEventListener('keydown', this.handleKeydown)\r\n     }\r\n      \r\n      handleKeydown = e => {\r\n        if(e.keyCode === this.props.letter.charCodeAt()) {\r\n          this.audio.play()\r\n          this.audio.currentTime = 0\r\n          this.props.handleDisplay(this.props.id)\r\n        }\r\n      }\r\n     \r\n      handleClick = () => {\r\n        this.audio.play()\r\n        this.audio.currentTime = 0\r\n        this.props.handleDisplay(this.props.id)\r\n      }\r\n      \r\n\r\n    render() {\r\n        return (\r\n          <div \r\n              className='drum-pad' \r\n              id={this.props.id}\r\n              onClick={this.handleClick}\r\n          >\r\n            <h1>{this.props.letter}</h1>\r\n            <audio id={this.props.letter}\r\n                   className='clip'\r\n                   src={this.props.src}\r\n                   ref={ref => this.audio = ref}\r\n              ></audio>\r\n          </div>\r\n        )\r\n      }\r\n \r\n}\r\n\r\nexport default DrumPad","import React from 'react';\nimport './App.css';\nimport DrumPad from './components/DrumPad'\n\nconst data = [\n  { id: 'snare', letter: 'Q', src: 'https://www.myinstants.com/media/sounds/snare.mp3' },\n  { id: 'bass 1', letter: 'W', src: 'https://www.myinstants.com/media/sounds/bass-drum.mp3' },\n  { id: 'bongo', letter: 'E', src: 'http://tipiwiki.free.fr/snd/Percussion(4e)2.wav' },\n  { id: 'tom tom', letter: 'A', src: 'http://www.denhaku.com/r_box/sr16/sr16tom/loelectm.wav' },\n  { id: 'bass 3', letter: 'S', src: 'http://billor.chsh.chc.edu.tw/sound/bass4.wav' },\n  { id: 'shotgun', letter: 'D', src: 'http://david.guerrero.free.fr/Effects/ShotgunReload.wav' },\n  { id: 'high hat', letter: 'Z', src: 'http://www.denhaku.com/r_box/tr707/closed.wav' },\n  { id: 'drum hit', letter: 'X', src: 'http://www.masterbits.de/sc_docu/sounds1/1TM00013.MP3' },\n  { id: 'laser', letter: 'C', src: 'http://www.sa-matra.net/sounds/starcontrol/Umgah-Backzip.wav'  },\n]\n\nclass App extends React.Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      display: 'Press a Key'\n    }\n  }\n\n  handleDisplay = display => this.setState({ display })\n  render(){\n  return (\n    <div>\n      <h1 className=\"title\">Go Drumming</h1>\n    <div id='drum-machine'>\n      <div id='drum-pads'>{data.map(d => (\n          <DrumPad\n            key={d.id}\n            id={d.id}\n            letter={d.letter}\n            src={d.src}\n            handleDisplay={this.handleDisplay}\n          />   \n         ))}</div>\n     \n    </div>  \n    <div id='display'>{this.state.display}</div> \n    </div>\n  );\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}